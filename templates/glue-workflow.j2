AWSTemplateFormatVersion: '2010-09-09'

Description: >-
    The primary workflow for processing RECOVER data. An outline of the workflow is below:

    S3 to JSON ->
    (JSON to Parquet) EnrolledParticipants and SymptomLog ->
    (JSON to Parquet) HealthKit ->
    (JSON to Parquet) Fitbit ->
    (JSON to Parquet) Google ->
    (JSON to Parquet) Garmin ->
    CompareParquetJob

Parameters:

  Namespace:
    Type: String
    Description: The namespace to which we write the datasets.

  JsonBucketName:
    Type: String
    Description: >-
      The name of the bucket where JSON datasets are stored.

  JsonKeyPrefix:
    Type: String
    Description: S3 key prefix where JSON datasets are stored.
    Default: json

  ParquetBucketName:
    Type: String
    Description: >-
      The name of the bucket where Parquet datasets are stored.

  ParquetKeyPrefix:
    Type: String
    Description: S3 key prefix where JSON datasets are stored.
    Default: parquet

  GlueDatabase:
    Type: String
    Description: >-
        Glue database containing Glue tables for use in JSON to Parquet job.

  S3ToJsonJobName:
    Type: String
    Description: The name of the S3 To JSON Job

  CompareParquetStagingNamespace:
    Type: String
    Description: the name of the "staging" namespace

  CompareParquetMainNamespace:
    Type: String
    Description: The name of the "main" namespace

Conditions:
  IsStagingNamespace: !Not [!Equals [!Ref Namespace, "main"]]

Resources:

  {% set datasets = [] %}
  {% for v in sceptre_user_data.dataset_schemas.tables.keys() if not "Deleted" in v %}
    {% set dataset = {} %}
    {% do dataset.update({'data_type': v}) %}
    {% do dataset.update({'table_name': 'dataset_' + v.lower()}) %}
    {% do dataset.update({'stackname_prefix': '{}'.format(v.replace('_',''))}) %}
    {% do datasets.append(dataset) %}
  {% endfor %}

  PrimaryWorkflow:
    Type: AWS::Glue::Workflow
    Properties:
      DefaultRunProperties:
        namespace: !Ref Namespace
        json_bucket: !Ref JsonBucketName
        json_prefix: !Ref JsonKeyPrefix
        parquet_bucket: !Ref ParquetBucketName
        parquet_prefix: !Ref ParquetKeyPrefix
        glue_database: !Ref GlueDatabase
      Description: >-
        Glue workflow for exporting RECOVER data to Parquet datasets
      MaxConcurrentRuns: 1
      Name: !Sub ${Namespace}-PrimaryWorkflow

  InitialTrigger:
    Type: AWS::Glue::Trigger
    Properties:
      Name: !Sub "${Namespace}-InitialTrigger"
      Actions:
        - JobName: !Ref S3ToJsonJobName
      Description: This is the first trigger in the primary workflow.
      Type: ON_DEMAND
      WorkflowName: !Ref PrimaryWorkflow

  S3ToJsonCompleteTrigger:
    Type: AWS::Glue::Trigger
    Properties:
      Name: !Sub "${Namespace}-S3ToJsonCompleteTrigger"
      Actions:
        {% for dataset in datasets if not "HealthKit" in dataset["data_type"] and not "Fitbit" in dataset["data_type"] and not "Google" in dataset["data_type"] and not "Garmin" in dataset["data_type"] %}
        - JobName: !Sub ${Namespace}-{{ dataset["stackname_prefix"]}}-Job
          Arguments: {"--glue-table": {{ "{}".format(dataset["table_name"]) }} }
        {% endfor %}
      Description: This trigger kicks off every JSON to Parquet job which is not associated with a device and runs after completion of the S3 to JSON job.
      Type: CONDITIONAL
      Predicate:
        Conditions:
        - JobName: !Ref S3ToJsonJobName
          State: SUCCEEDED
          LogicalOperator: EQUALS
      StartOnCreation: true
      WorkflowName: !Ref PrimaryWorkflow

  HealthKitTrigger:
    Type: AWS::Glue::Trigger
    Properties:
      Name: !Sub "${Namespace}-HealthKitTrigger"
      Actions:
        {% for dataset in datasets if "HealthKit" in dataset["data_type"] %}
        - JobName: !Sub ${Namespace}-{{ dataset["stackname_prefix"]}}-Job
          Arguments: {"--glue-table": {{ "{}".format(dataset["table_name"]) }} }
        {% endfor %}
      Description: This trigger kicks off every JSON to Parquet job which is associated with a HealthKit data type.
      Type: CONDITIONAL
      Predicate:
        Conditions:
          {% for dataset in datasets if not "HealthKit" in dataset["data_type"] and not "Fitbit" in dataset["data_type"] and not "Google" in dataset["data_type"] and not "Garmin" in dataset["data_type"] %}
          - JobName: !Sub ${Namespace}-{{ dataset["stackname_prefix"]}}-Job
            State: SUCCEEDED
            LogicalOperator: EQUALS
          {% endfor %}
        Logical: AND
      StartOnCreation: true
      WorkflowName: !Ref PrimaryWorkflow

  FitbitTrigger:
    Type: AWS::Glue::Trigger
    Properties:
      Name: !Sub "${Namespace}-FitbitTrigger"
      Actions:
        {% for dataset in datasets if "Fitbit" in dataset["data_type"] %}
        - JobName: !Sub ${Namespace}-{{ dataset["stackname_prefix"]}}-Job
          Arguments: {"--glue-table": {{ "{}".format(dataset["table_name"]) }} }
        {% endfor %}
      Description: This trigger kicks off every JSON to Parquet job which is associated with a Fitbit data type.
      Type: CONDITIONAL
      Predicate:
        Conditions:
          {% for dataset in datasets if "HealthKit" in dataset["data_type"] %}
          - JobName: !Sub ${Namespace}-{{ dataset["stackname_prefix"]}}-Job
            State: SUCCEEDED
            LogicalOperator: EQUALS
          {% endfor %}
        Logical: AND
      StartOnCreation: true
      WorkflowName: !Ref PrimaryWorkflow

  GoogleTrigger:
    Type: AWS::Glue::Trigger
    Properties:
      Name: !Sub "${Namespace}-GoogleTrigger"
      Actions:
        {% for dataset in datasets if "Google" in dataset["data_type"] %}
        - JobName: !Sub ${Namespace}-{{ dataset["stackname_prefix"]}}-Job
          Arguments: {"--glue-table": {{ "{}".format(dataset["table_name"]) }} }
        {% endfor %}
      Description: This trigger kicks off every JSON to Parquet job which is associated with a Google data type.
      Type: CONDITIONAL
      Predicate:
        Conditions:
          {% for dataset in datasets if "Fitbit" in dataset["data_type"] %}
          - JobName: !Sub ${Namespace}-{{ dataset["stackname_prefix"]}}-Job
            State: SUCCEEDED
            LogicalOperator: EQUALS
          {% endfor %}
        Logical: AND
      StartOnCreation: true
      WorkflowName: !Ref PrimaryWorkflow

  GarminTrigger:
    Type: AWS::Glue::Trigger
    Properties:
      Name: !Sub "${Namespace}-GarminTrigger"
      Actions:
        {% for dataset in datasets if "Garmin" in dataset["data_type"] %}
        - JobName: !Sub ${Namespace}-{{ dataset["stackname_prefix"]}}-Job
          Arguments: {"--glue-table": {{ "{}".format(dataset["table_name"]) }} }
        {% endfor %}
      Description: This trigger kicks off every JSON to Parquet job which is associated with a Garmin data type.
      Type: CONDITIONAL
      Predicate:
        Conditions:
          {% for dataset in datasets if "Google" in dataset["data_type"] %}
          - JobName: !Sub ${Namespace}-{{ dataset["stackname_prefix"]}}-Job
            State: SUCCEEDED
            LogicalOperator: EQUALS
          {% endfor %}
        Logical: AND
      StartOnCreation: true
      WorkflowName: !Ref PrimaryWorkflow

  JsontoParquetCompleteTrigger:
    Type: AWS::Glue::Trigger
    Condition: IsStagingNamespace
    Properties:
      Name: !Sub "${Namespace}-JsontoParquetCompleteTrigger"
      Actions:
        {% for dataset in datasets %}
        - JobName: !Sub ${Namespace}-{{ dataset["stackname_prefix"] }}-CompareParquetJob
          Arguments:
            "--data-type": {{ "{}".format(dataset["table_name"]) }}
            "--main-namespace": !Ref CompareParquetMainNamespace
            "--staging-namespace": !Ref CompareParquetStagingNamespace
            "--parquet-bucket": !Ref ParquetBucketName
            "--additional-python-modules": "datacompy~=0.8"
        {% endfor %}
      Description: This trigger runs after completion of all JSON to Parquet jobs
      Type: CONDITIONAL
      Predicate:
        Conditions:
          {% for dataset in datasets if "Garmin" in dataset["data_type"] %}
          - JobName: !Sub "${Namespace}-{{ dataset["stackname_prefix"] }}-Job"
            State: SUCCEEDED
            LogicalOperator: EQUALS
          {% endfor %}
        Logical: AND
      StartOnCreation: true
      WorkflowName: !Ref PrimaryWorkflow

Outputs:

  WorkflowName:
    Value: !Ref PrimaryWorkflow
    Export:
      Name: !Sub '${AWS::Region}-${AWS::StackName}-WorkflowName'
